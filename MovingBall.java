/* autogenerated by Processing revision 1293 on 2024-09-09 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class MovingBall extends PApplet {

// global variables
// define three physballs
PhysBall b1 = null;
PhysBall b2 = null;
PhysBall b3 = null;
int valOfMeter = 100; // specify the value of the meter (in pixels that will be displayed on the ruler and affect acceleration constant)
double acceleration = 9.81f; // specify acceleration constant here (in m/s^2)


public void setup()
{
  frameRate(60);
  /* size commented out by preprocessor */;
  b1 = new PhysBall(150,400 - 3 * valOfMeter - 15, 30, 0,255,0); // top ball
  b2 = new PhysBall(250,400 - 2 * valOfMeter - 15, 30,255,0,0); // middle ball
  b3 = new PhysBall(350,400 - 1 * valOfMeter - 15, 30,0,0,255); // lowest ball
}

public void draw()
{
  background(255);
  ruler();
  b1.display();
  b2.display();
  b3.display();
  b1.move();
  b2.move();
  b3.move();
  b1.ballinfo();
  b2.ballinfo();
  b3.ballinfo();
  debug();
} //<>//

public void ruler()
{
  // draw ruler here based on specified value (in pixels)
  stroke(0);
  line(10,0,10,400);
  
  int count = 0;
  for(int i = 0; i < 4; i++) // draw the little tick marks 7 times (with text)
  {
    int yVal = 399 - valOfMeter * i;
    line(0,yVal,20,yVal);
    textSize(10);
    fill(0);
    text(count + "m", 25, yVal + 1);
    count++;
  }
}

public void debug() // self explanitory
{
  System.out.println("Debug Info: time = " +  (float)(millis()/1000.0f) + " (s), ");
  System.out.println("Ball 1 = [" + b1.getX() + ", " + b1.getY() + "] Vel = " + b1.getVY());
  System.out.println("Ball 2 = [" + b2.getX() + ", " + b2.getY() + "] Vel = " + b2.getVY());
  System.out.println("Ball 3 = [" + b3.getX() + ", " + b3.getY() + "] Vel = " + b3.getVY());
}
public class PhysBall
{
  private float x;
  private float y;
  private float vy;
  private float radius;
  // color stuff
  private int col1;
  private int col2;
  private int col3;
  private float time = 0; // for capturing time when ball first hits ground
  private boolean hitGround = false; // used in ballinfo() method
  
  public PhysBall(float x, float y, float radius, int col1, int col2, int col3)
  {
    this.x = x;
    this.y = y;
    this.radius = radius;
    this.col1 = col1;
    this.col2 = col2;
    this.col3 = col3;
  }
  
  public void display()
  {
    noStroke();
    fill(col1,col2,col3); // specify color of ball (with no outline)
    circle(this.x, this.y, radius);
  }
  
  public void move()
  {
    boolean finished = false;
    if (finished == false)
    {
      this.vy += (acceleration/18); // apply gravity (acceleration in m/s^2 instead of pixels per second squared)
      this.y += this.vy; // adds vert velocity to pos
      if (y > 400 - radius/2 || y < 0 + radius/2) // specifying bounds
      {
        y = 400 - radius/2; // this is a holy piece of code that makes sure that the balls do not go crazy and hasta luego through the floor
        vy *= -1;
      }
      finished = true; // run once for every time function is called
      
      /*
      if (y > 400 - radius && finished)
      {
        y = 400 - radius/2;
        vy = 0;
      }
      */

    }
  }
  
  public float getX()
  {
    return x;
  }
  
  public float getY()
  {
    return y;
  }
  
  public float getVY()
  {
    return vy;
  }
  
  public float getRadius()
  {
    return radius;
  }
  
  public void ballinfo() // gives info on specifically the first drop of the ball (when it hits the ground first)
  {
    textAlign(CENTER);
    if (!hitGround) // run while ball has not hit ground
    {
      // prints out time as well as ball position, radius, and respective velocities
      textSize(20);
      fill(col1,col2,col3);
      text((float)(millis()/1000.0f) + "(s)", x, 20);
    
      time = (float)(millis()/1000.0f); // saves the time value of when the ball first hit the ground
    }
    if (y >= 400 - radius || hitGround) // run the ballinfo method once (since ball will bounce after the fact)
    {
      hitGround = true; 
      textSize(20);
      fill(col1,col2,col3);
      text(time + "(s)", x, 20);
    }
  }
}


  public void settings() { size(400, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "MovingBall" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
